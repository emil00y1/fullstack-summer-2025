stages:
  - lint
  - security
  - unit-test
  - build  
  - api-test
  - deploy

variables:
  NODE_VERSION: "18"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

lint:
  stage: lint
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint:check
  only:
    - main
    - merge_requests
    - develop

security-audit:
  stage: security  
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm audit --audit-level moderate
    - echo "Security audit completed"
  allow_failure: true  
  only:
    - main
    - merge_requests
    - develop

unit-test:
  stage: unit-test
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: test-results/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
      - test-results/
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests
    - develop

build:
  stage: build
  image: node:18-alpine
  variables:
    NEXTAUTH_URL: $NEXTAUTH_URL_PROD
    NEXTAUTH_SECRET: $NEXTAUTH_SECRET
    NODE_ENV: "production"
  before_script:
    - npm ci --cache .npm --prefer-offline --include=dev
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
      - .vercel/output/
    expire_in: 1 hour
  only:
    - main
    - develop

api-test:
  stage: api-test
  image: node:18-alpine
  services:
    - name: mysql:latest
      alias: mysql
  variables:
    DATABASE_URL: "mysql://root:password@mysql:3306/exam_summer_2025"
    MYSQL_ROOT_PASSWORD: password
    MYSQL_DATABASE: exam_summer_2025
    DEV_DB_HOST: mysql
    DEV_DB_PORT: 3306
    DEV_DB_USER: root
    DEV_DB_PASSWORD: password
    DEV_DB_NAME: exam_summer_2025
    NEXTAUTH_URL: "http://localhost:3000"
    NEXTAUTH_SECRET: $NEXTAUTH_SECRET
    JWT_SECRET: $JWT_SECRET
    NODE_ENV: "test"
  dependencies:
    - build
  before_script:
    - echo "Installing dependencies..."
    - apk add --no-cache curl wget
    - echo "Installing real MySQL client..."
    - wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.40-linux-glibc2.17-x86_64-minimal.tar.xz
    - tar -xf mysql-8.0.40-linux-glibc2.17-x86_64-minimal.tar.xz
    - mv mysql-8.0.40-linux-glibc2.17-x86_64-minimal /usr/local/mysql
    - export PATH="/usr/local/mysql/bin:$PATH"
    - npm ci --cache .npm --prefer-offline
    - echo "Waiting for MySQL to be ready..."
    - for i in $(seq 1 30); do if mysqladmin ping -h mysql --ssl-mode=DISABLED --silent; then echo "MySQL is ready!"; break; fi; echo "Waiting for MySQL... ($i/30)"; sleep 2; done
    - echo "Creating database..."
    - mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD --ssl-mode=DISABLED -e "CREATE DATABASE IF NOT EXISTS exam_summer_2025;"
    - echo "Testing database connection with current environment variables:"
    - echo "DEV_DB_HOST:" $DEV_DB_HOST
    - echo "DEV_DB_PORT:" $DEV_DB_PORT
    - echo "NODE_ENV:" $NODE_ENV
    - mysql -h $DEV_DB_HOST -P $DEV_DB_PORT -u $DEV_DB_USER -p$DEV_DB_PASSWORD --ssl-mode=DISABLED $DEV_DB_NAME -e "SELECT 1;"
    - echo "Starting Next.js with environment:" $NODE_ENV
    - PORT=3000 npm run start > next.log 2>&1 &
    - export NEXT_PID=$!
    - echo "Next.js PID:" $NEXT_PID
    - echo "Waiting for Next.js API to be ready..."
    - for i in $(seq 1 60); do if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then echo "Next.js API is ready!"; break; fi; if [ $i -eq 20 ]; then echo "Next.js logs after 20 attempts:"; head -50 next.log; fi; echo "Waiting for Next.js API... ($i/60)"; sleep 2; done
    - if ! curl -s http://localhost:3000/api/health > /dev/null 2>&1; then echo "Next.js failed to start. Full logs:"; cat next.log; exit 1; fi
  script:
    - npm run test:api:ci
  after_script:
    - echo "=== Next.js Final Logs ==="
    - cat next.log || echo "No logs found"
    - if [ ! -z "$NEXT_PID" ]; then kill $NEXT_PID || true; fi
  artifacts:
    reports:
      junit: api-test-results.xml
    paths:
      - api-test-results.xml
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests
    - develop

deploy:production:
  stage: deploy
  image: node:18-alpine
  dependencies:
    - build
  before_script:
    - npm install -g vercel@latest
  script:
    - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
  environment:
    name: production
    url: https://exam-summer-2025.vercel.app/
  only:
    - main
  when: manual

health-check:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Checking deployment health..."
    - for i in $(seq 1 10); do if curl -f -s https://exam-summer-2025.vercel.app/api/health; then echo "Deployment is healthy!"; exit 0; fi; echo "Health check failed, retrying... ($i/10)"; sleep 30; done
    - echo "Deployment health check failed"
    - exit 1
  only:
    - main
  needs:
    - deploy:production
  when: manual