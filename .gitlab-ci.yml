stages:
  - lint
  - security
  - unit-test
  - api-test
  - build
  - docker-build
  - deploy

variables:
  NODE_VERSION: "18"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

lint:
  stage: lint
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint:check
  only:
    - main
    - merge_requests

security-audit:
  stage: security  
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm audit --audit-level moderate
    - echo "Security audit completed"
  allow_failure: true  
  only:
    - main
    - merge_requests

unit-test:
  stage: unit-test
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: test-results/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
      - test-results/
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests

api-test:
  stage: api-test
  image: node:18-alpine
  services:
    - name: mysql:8.0.39
      alias: mysql
  variables:
    DATABASE_URL: "mysql://root:password@mysql:3306/exam_summer_2025"
    MYSQL_ROOT_PASSWORD: password
    MYSQL_DATABASE: exam_summer_2025
    DEV_DB_HOST: mysql
    DEV_DB_PORT: 3306
    DEV_DB_USER: root
    DEV_DB_PASSWORD: password
    DEV_DB_NAME: exam_summer_2025
    NODE_ENV: "test"
  before_script:
    - apk add --no-cache mysql-client curl
    - npm ci --cache .npm --prefer-offline
    - |
      echo "Waiting for MySQL to be ready..."
      until mysql -h mysql -u root -ppassword --skip-ssl -e "SELECT 1"; do
        echo "MySQL not ready yet. Retrying in 5 seconds..."
        sleep 5
      done
      echo "MySQL is ready."
  script:
    - npm run test:api:ci

build:
  stage: build
  image: node:18-alpine
  variables:
    NEXTAUTH_URL: $NEXTAUTH_URL_PROD
    NEXTAUTH_SECRET: $NEXTAUTH_SECRET
    NODE_ENV: "production"
  before_script:
    - npm ci --cache .npm --prefer-offline --include=dev
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
      - .vercel/output/
    expire_in: 1 hour
  only:
    - main

docker-build:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

deploy:production:
  stage: deploy
  image: node:18-alpine
  dependencies:
    - build
  before_script:
    - npm install -g vercel@latest
  script:
    - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
  environment:
    name: production
    url: https://exam-summer-2025.vercel.app/
  only:
    - main
  when: manual

health-check:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Checking deployment health..."
    - for i in $(seq 1 10); do if curl -f -s https://exam-summer-2025.vercel.app/api/health; then echo "Deployment is healthy!"; exit 0; fi; echo "Health check failed, retrying... ($i/10)"; sleep 30; done
    - echo "Deployment health check failed"
    - exit 1
  only:
    - main
  needs:
    - deploy:production
  when: manual