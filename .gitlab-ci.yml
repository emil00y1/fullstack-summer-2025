stages:
  - security
  - lint
  - test
  - build
  - api-test
  - deploy

variables:
  NODE_VERSION: "18"

# Cache for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

# =============================================================================
# SECURITY STAGE
# =============================================================================

security-scan:
  stage: security
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm audit --audit-level moderate
    - echo "Security scan completed"
  allow_failure: true
  only:
    - main
    - merge_requests

# =============================================================================
# LINT STAGE  
# =============================================================================

lint:
  stage: lint
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint:check
  only:
    - main
    - merge_requests

# =============================================================================
# TEST STAGE
# =============================================================================

unit-test:
  stage: test
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: test-results/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests

# =============================================================================
# BUILD STAGE
# =============================================================================

build:
  stage: build
  image: node:18-alpine
  variables:
    NEXTAUTH_URL: "http://localhost:3000"
    NEXTAUTH_SECRET: $NEXTAUTH_SECRET
    NODE_ENV: "production"
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
    expire_in: 1 hour
  only:
    - main
    - merge_requests

# =============================================================================
# API TEST STAGE
# =============================================================================

api-test:
  stage: api-test
  image: node:18-alpine
  services:
    - name: mysql:8.0
      alias: mysql
  variables:
    MYSQL_ROOT_PASSWORD: "test_password"
    MYSQL_DATABASE: "exam_summer_2025_test"
    # App config for testing
    NODE_ENV: "test"
    DEV_DB_HOST: "mysql"
    DEV_DB_PORT: "3306"
    DEV_DB_USER: "root"
    DEV_DB_PASSWORD: "test_password"
    DEV_DB_NAME: "exam_summer_2025_test"
    NEXTAUTH_URL: "http://localhost:3000"
    NEXTAUTH_SECRET: $NEXTAUTH_SECRET
    JWT_SECRET: $JWT_SECRET
    URL_ENCRYPTION_KEY: $URL_ENCRYPTION_KEY
  before_script:
    - apk add --no-cache mysql-client curl
    - npm ci --cache .npm --prefer-offline
    # Wait for MySQL
    - |
      echo "Waiting for MySQL..."
      for i in $(seq 1 30); do
        if mysql -h mysql -u root -ptest_password -e "SELECT 1" >/dev/null 2>&1; then
          echo "MySQL is ready!"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "MySQL timeout"
          exit 1
        fi
        sleep 2
      done
    # Setup test database
    - mysql -h mysql -u root -ptest_password -e "CREATE DATABASE IF NOT EXISTS exam_summer_2025_test;"
    - node seed.js
  script:
    # Start app
    - npm run start &
    - sleep 10
    # Wait for app to be ready
    - |
      for i in $(seq 1 15); do
        if curl -s http://localhost:3000/api/health >/dev/null; then
          echo "App is ready!"
          break
        fi
        if [ $i -eq 15 ]; then
          echo "App timeout"
          exit 1
        fi
        sleep 2
      done
    # Run API tests
    - npm run test:api:ci
  artifacts:
    reports:
      junit: api-test-results.xml
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests

# =============================================================================
# DEPLOY STAGE
# =============================================================================

deploy:
  stage: deploy
  image: node:18-alpine
  before_script:
    - npm install -g vercel@latest
  script:
    - vercel deploy --prod --token=$VERCEL_TOKEN --yes
  environment:
    name: production
    url: https://exam-summer-2025.vercel.app/
  only:
    - main
  when: manual

# Simple health check
health-check:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      echo "Checking deployment health..."
      for i in $(seq 1 5); do
        if curl -f -s https://exam-summer-2025.vercel.app/api/health; then
          echo "Deployment is healthy!"
          exit 0
        fi
        echo "Retrying health check... ($i/5)"
        sleep 10
      done
      echo "Health check failed"
      exit 1
  only:
    - main
  needs:
    - deploy