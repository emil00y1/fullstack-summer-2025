# Complete GitLab CI/CD Pipeline
stages:
  - lint
  - security
  - unit-test
  - build  
  - api-test
  - deploy

variables:
  NODE_VERSION: "18"

# Cache node_modules for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

# ============== LINT STAGE ==============

lint:
  stage: lint
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint:check
  only:
    - main
    - merge_requests
    - develop

# ============== SECURITY STAGE ==============

security-audit:
  stage: security  # Run with lint stage to save time
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm audit --audit-level moderate
    - echo "Security audit completed"
  allow_failure: true  # Don't block pipeline initially
  only:
    - main
    - merge_requests
    - develop

# ============== UNIT TEST STAGE ==============

unit-test:
  stage: unit-test
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: test-results/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
      - test-results/
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests
    - develop

# ============== BUILD STAGE ==============

build:
  stage: build
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run build
    - npm install -g vercel@latest
    - vercel build --token=$VERCEL_TOKEN
  artifacts:
    paths:
      - .next/
      - .vercel/output/
    expire_in: 1 hour
  only:
    - main
    - develop

# ============== API TEST STAGE ==============

api-test:
  stage: api-test
  image: node:18-alpine
  services:
    - name: mysql:latest
      alias: mysql
  variables:
    # Database config matching your Docker Compose
    DATABASE_URL: "mysql://root:password@mysql:3306/exam_summer_2025"
    MYSQL_ROOT_PASSWORD: password
    MYSQL_DATABASE: exam_summer_2025
    # App environment variables
    DEV_DB_HOST: mysql
    DEV_DB_PORT: 3306
    DEV_DB_USER: root
    DEV_DB_PASSWORD: password
    DEV_DB_NAME: exam_summer_2025
    NEXTAUTH_URL: "http://localhost:3000"
    NEXTAUTH_SECRET: "test-secret-key-for-ci"
    JWT_SECRET: "test-jwt-secret"
    NODE_ENV: "test"
  dependencies:
    - build
  before_script:
    - apk add --no-cache mysql-client curl
    - npm ci --cache .npm --prefer-offline
    # Wait for MySQL to be ready
    - |
      echo "‚è≥ Waiting for MySQL to be ready..."
      for i in {1..30}; do
        if mysqladmin ping -h mysql --silent; then 
          echo "‚úÖ MySQL is ready!"
          break
        fi
        echo "‚è≥ Waiting for MySQL... ($i/30)"
        sleep 2
      done
    # Create database (same as your Docker Compose)
    - mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS exam_summer_2025;"
    # Start Next.js app in background
    - PORT=3000 npm run start &
    - export NEXT_PID=$!
    # Wait for Next.js to be ready
    - |
      echo "‚è≥ Waiting for Next.js API to be ready..."
      for i in {1..60}; do
        if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then 
          echo "‚úÖ Next.js API is ready!"
          break
        fi
        echo "‚è≥ Waiting for Next.js API... ($i/60)"
        sleep 2
      done
  script:
    - npm run test:api:ci
  after_script:
    # Clean up the Next.js process
    - kill $NEXT_PID || true
  artifacts:
    reports:
      junit: api-test-results.xml
    paths:
      - api-test-results.xml
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests
    - develop

# ============== DEPLOY STAGE ==============

# Deploy to Vercel Preview (for develop branch and MRs)
deploy:preview:
  stage: deploy
  image: node:18-alpine
  dependencies:
    - build
  before_script:
    - npm install -g vercel@latest
  script:
    - vercel deploy --prebuilt --token=$VERCEL_TOKEN
  environment:
    name: preview
    url: https://your-app-git-$CI_COMMIT_REF_NAME.vercel.app
  only:
    - develop
    - merge_requests
  except:
    - main

# Deploy to Vercel Production (manual for main branch)
deploy:production:
  stage: deploy
  image: node:18-alpine
  dependencies:
    - build
  before_script:
    - npm install -g vercel@latest
  script:
    - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
  environment:
    name: production
    url: https://your-app.vercel.app
  only:
    - main
  when: manual

# Health check after production deployment
health-check:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      echo "üîç Checking deployment health..."
      for i in {1..10}; do
        if curl -f -s https://your-app.vercel.app/api/health; then
          echo "‚úÖ Deployment is healthy!"
          exit 0
        fi
        echo "‚è≥ Health check failed, retrying... ($i/10)"
        sleep 30
      done
      echo "‚ùå Deployment health check failed"
      exit 1
  only:
    - main
  needs:
    - deploy:production
  when: manual