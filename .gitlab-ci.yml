stages:
  - security
  - lint
  - test
  - build
  - api-test
  - deploy

variables:
  NODE_VERSION: "18"

# Cache for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

# =============================================================================
# SECURITY STAGE
# =============================================================================

security-scan:
  stage: security
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm audit --audit-level moderate
    - echo "Security scan completed"
  allow_failure: true
  only:
    - main
    - merge_requests

# =============================================================================
# LINT STAGE  
# =============================================================================

lint:
  stage: lint
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint:check
  only:
    - main
    - merge_requests

# =============================================================================
# TEST STAGE
# =============================================================================

unit-test:
  stage: test
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: test-results/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests

# =============================================================================
# BUILD STAGE
# =============================================================================

build:
  stage: build
  image: node:18-alpine
  variables:
    NEXTAUTH_URL: $NEXTAUTH_URL_PROD
    NEXTAUTH_SECRET: $NEXTAUTH_SECRET
    NODE_ENV: "production"
  before_script:
    - npm ci --cache .npm --prefer-offline --include=dev
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
    expire_in: 1 hour
  only:
    - main

# =============================================================================
# API TEST STAGE (FIXED VERSION)
# =============================================================================

api-test:
  stage: api-test
  image: node:18-alpine
  services:
    - name: mysql:8.0
      alias: mysql
      command: ["--default-authentication-plugin=mysql_native_password", "--skip-host-cache", "--skip-name-resolve"]
  variables:
    MYSQL_ROOT_PASSWORD: "test_password"
    MYSQL_DATABASE: "exam_summer_2025_test"
    MYSQL_USER: "test_user"
    MYSQL_PASSWORD: "test_password"
    # App config for testing
    NODE_ENV: "test"
    DEV_DB_HOST: "mysql"
    DEV_DB_PORT: "3306"
    DEV_DB_USER: "root"
    DEV_DB_PASSWORD: "test_password"
    DEV_DB_NAME: "exam_summer_2025_test"
    NEXTAUTH_URL: "http://localhost:3000"
    NEXTAUTH_SECRET: $NEXTAUTH_SECRET
    JWT_SECRET: $JWT_SECRET
    URL_ENCRYPTION_KEY: $URL_ENCRYPTION_KEY
  before_script:
    - apk add --no-cache mysql-client curl
    - npm ci --cache .npm --prefer-offline
    # Wait for MySQL with better error handling
    - |
      echo "Waiting for MySQL to be ready..."
      MYSQL_READY=0
      for i in $(seq 1 60); do
        echo "Attempt $i/60..."
        if mysql -h mysql -u root -ptest_password --connect-timeout=10 -e "SELECT 1" >/dev/null 2>&1; then
          echo "✅ MySQL is ready!"
          MYSQL_READY=1
          break
        fi
        if [ $i -eq 60 ]; then
          echo "❌ MySQL connection timeout after 60 attempts"
          echo "🔍 Checking MySQL service status..."
          # Try to get more info about what's wrong
          mysql -h mysql -u root -ptest_password -e "SELECT 1" || true
          exit 1
        fi
        echo "MySQL not ready yet, waiting 3 seconds..."
        sleep 3
      done
    # Setup test database
    - |
      echo "🔧 Setting up test database..."
      mysql -h mysql -u root -ptest_password -e "CREATE DATABASE IF NOT EXISTS exam_summer_2025_test;" || exit 1
      mysql -h mysql -u root -ptest_password -e "SHOW DATABASES;" || exit 1
      echo "✅ Database created successfully"
    # Run database seeding
    - |
      echo "🌱 Seeding test database..."
      node seed.js || exit 1
      echo "✅ Database seeded successfully"
  script:
    # Start app in background
    - |
      echo "🚀 Starting Next.js application..."
      npm run start &
      APP_PID=$!
      echo "App started with PID: $APP_PID"
    # Wait for app to be ready with better timeout
    - |
      echo "⏳ Waiting for Next.js to be ready..."
      APP_READY=0
      for i in $(seq 1 30); do
        echo "Checking app status... ($i/30)"
        if curl -s --connect-timeout 5 http://localhost:3000/api/health >/dev/null 2>&1; then
          echo "✅ Next.js is ready!"
          APP_READY=1
          break
        fi
        if [ $i -eq 30 ]; then
          echo "❌ Next.js startup timeout"
          echo "🔍 Checking if process is still running..."
          ps aux | grep node || true
          echo "🔍 Trying to curl with verbose output..."
          curl -v http://localhost:3000/api/health || true
          kill -9 $APP_PID 2>/dev/null || true
          exit 1
        fi
        sleep 3
      done
    # Run API tests
    - |
      echo "🧪 Running API tests..."
      npm run test:api:ci || {
        echo "❌ API tests failed"
        echo "🔍 App process status:"
        ps aux | grep node || true
        kill -9 $APP_PID 2>/dev/null || true
        exit 1
      }
      echo "✅ API tests completed successfully"
    # Cleanup
    - kill -9 $APP_PID 2>/dev/null || true
  artifacts:
    reports:
      junit: api-test-results.xml
    expire_in: 1 week
    when: always
  only:
    - main
    - merge_requests

# =============================================================================
# DEPLOY STAGE
# =============================================================================

deploy:
  stage: deploy
  image: node:18-alpine
  before_script:
    - npm install -g vercel@latest
  script:
    - vercel deploy --prod --token=$VERCEL_TOKEN --yes
  environment:
    name: production
    url: https://exam-summer-2025.vercel.app/
  only:
    - main
  when: manual

# Simple health check
health-check:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      echo "Checking deployment health..."
      for i in $(seq 1 5); do
        if curl -f -s https://exam-summer-2025.vercel.app/api/health; then
          echo "Deployment is healthy!"
          exit 0
        fi
        echo "Retrying health check... ($i/5)"
        sleep 10
      done
      echo "Health check failed"
      exit 1
  only:
    - main
  needs:
    - deploy