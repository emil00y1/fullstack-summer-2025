{
  "info": {
    "name": "Your App API Tests",
    "description": "API tests for Next.js social media app",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Health check returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has status ok', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status', 'ok');",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "User Signup",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser{{$randomInt}}\",\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"TestPass123!\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/signup",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "signup"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Signup returns success or conflict', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 409]);",
              "});",
              "",
              "pm.test('Response is JSON', function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "});",
              "",
              "if (pm.response.code === 201) {",
              "    pm.test('Success response has correct message', function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData.message).to.include('Account created');",
              "        pm.expect(jsonData).to.have.property('email');",
              "    });",
              "}",
              "",
              "if (pm.response.code === 409) {",
              "    pm.test('Conflict response has error message', function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData).to.have.property('message');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Posts (Public)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/posts?limit=10&offset=0",
          "host": ["{{baseUrl}}"],
          "path": ["api", "posts"],
          "query": [
            {
              "key": "limit",
              "value": "10"
            },
            {
              "key": "offset", 
              "value": "0"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get posts returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "",
              "pm.test('Posts have required structure', function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.length > 0) {",
              "        const post = jsonData[0];",
              "        pm.expect(post).to.have.property('id');",
              "        pm.expect(post).to.have.property('body');",
              "        pm.expect(post).to.have.property('createdAt');",
              "    }",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Post (No Auth)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": \"This is a test post from Postman\",\n  \"isPublic\": true\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/posts",
          "host": ["{{baseUrl}}"],
          "path": ["api", "posts"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Create post requires authentication', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Error message is correct', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.include('Unauthorized');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Follow User (No Auth)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"test-user-id-123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/follow",
          "host": ["{{baseUrl}}"],
          "path": ["api", "follow"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Follow requires authentication', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Error message is correct', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.equal('Authentication required');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Comments (Invalid Post ID)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/posts/invalid-post-id/comments",
          "host": ["{{baseUrl}}"],
          "path": ["api", "posts", "invalid-post-id", "comments"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid post ID returns 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Error message is correct', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.include('Invalid post ID');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Comment (No Auth)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": \"This is a test comment\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/posts/invalid-post-id/comments",
          "host": ["{{baseUrl}}"],
          "path": ["api", "posts", "invalid-post-id", "comments"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Create comment requires auth or invalid post', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
              "});",
              "",
              "if (pm.response.code === 401) {",
              "    pm.test('Auth error message is correct', function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData.error).to.equal('Unauthorized');",
              "    });",
              "}",
              "",
              "if (pm.response.code === 400) {",
              "    pm.test('Invalid post ID error', function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData.error).to.include('Invalid post ID');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Invalid Endpoint Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/nonexistent",
          "host": ["{{baseUrl}}"],
          "path": ["api", "nonexistent"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid endpoint returns 404', function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    }
  ]
}